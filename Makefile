source_paths = terraform_plan_approval
container = docker run -i --rm -u $$(id -u):$$(id -g) -v "$$(pwd)":"$$(pwd)" -w "$$(pwd)" $(3) $(1) $(2)
compose = UID_STRING=$$(id -u):$$(id -g) docker-compose -f test/docker-compose.yml $(1)
compose_run = $(call compose, run --rm $(3) $(1) $(2))

user_cache_dir := $(HOME)/.cache

format:
	$(call container, dockerizedtools/black:19.10b0, .)

check: check-format check-types check-lint

check-types:
	$(call container, dockerizedtools/mypy:0.782, --ignore-missing-imports $(source_paths) test)

check-lint:
	$(call container, dockerizedtools/flake8:3.8.3, $(source_paths) test)

check-format:
	$(call container, dockerizedtools/black:19.10b0, --check .)

dependencies:
	rm -rf vendor
	$(call container, python:3.8.3-alpine3.12, pip install --user -r requirements.txt, \
		-e PYTHONUSERBASE=vendor \
		-v "$(user_cache_dir)":"$(user_cache_dir)" -e XDG_CACHE_HOME="$(user_cache_dir)")

test-setup:
	$(call compose, up -d)

.PHONY: test
test:
	$(call compose_run, tests, python -m unittest -v)

test-cleanup:
	-$(call compose, down -t 0)

redis-cli:
	$(call compose, exec redis redis-cli)

insert-test-plan:
	$(call compose, exec redis redis-cli set abc-plan "G1swbRtbMW1SZWZyZXNoaW5nIFRlcnJhZm9ybSBzdGF0ZSBpbi1tZW1vcnkgcHJpb3IgdG8gcGxhbi4uLhtbMG0NClRoZSByZWZyZXNoZWQgc3RhdGUgd2lsbCBiZSB1c2VkIHRvIGNhbGN1bGF0ZSB0aGlzIHBsYW4sIGJ1dCB3aWxsIG5vdCBiZQ0KcGVyc2lzdGVkIHRvIGxvY2FsIG9yIHJlbW90ZSBzdGF0ZSBzdG9yYWdlLg0KG1swbQ0KG1swbRtbMW1hd3Nfc3FzX3F1ZXVlLm15X3F1ZXVlOiBSZWZyZXNoaW5nIHN0YXRlLi4uIFtpZD1odHRwczovL3Nxcy51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS8xMjM0NTY3ODkwMTIvbXktcXVldWVdG1swbQ0KG1swbRtbMW1hd3NfczNfYnVja2V0Lm15X2J1Y2tldDogUmVmcmVzaGluZyBzdGF0ZS4uLiBbaWQ9ZGVtby1idWNrZXQyMDIwMDgyNDE3MTIxMzgyMzMwMDAwMDAwMV0bWzBtDQoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQpBbiBleGVjdXRpb24gcGxhbiBoYXMgYmVlbiBnZW5lcmF0ZWQgYW5kIGlzIHNob3duIGJlbG93Lg0KUmVzb3VyY2UgYWN0aW9ucyBhcmUgaW5kaWNhdGVkIHdpdGggdGhlIGZvbGxvd2luZyBzeW1ib2xzOg0KICAbWzMybSsbWzBtIGNyZWF0ZQ0KICAbWzMzbX4bWzBtIHVwZGF0ZSBpbi1wbGFjZQ0KG1szMW0tG1swbS8bWzMybSsbWzBtIGRlc3Ryb3kgYW5kIHRoZW4gY3JlYXRlIHJlcGxhY2VtZW50DQobWzBtDQpUZXJyYWZvcm0gd2lsbCBwZXJmb3JtIHRoZSBmb2xsb3dpbmcgYWN0aW9uczoNCg0KG1sxbSAgIyBhd3NfczNfYnVja2V0Lm15X2J1Y2tldBtbMG0gbXVzdCBiZSAbWzFtG1szMW1yZXBsYWNlZBtbMG0bWzBtDQobWzBtG1szMW0tG1swbS8bWzMybSsbWzBtG1swbSByZXNvdXJjZSAiYXdzX3MzX2J1Y2tldCIgIm15X2J1Y2tldCIgew0KICAgICAgG1szMm0rG1swbSAbWzBtG1sxbRtbMG1hY2NlbGVyYXRpb25fc3RhdHVzG1swbRtbMG0gICAgICAgICA9IChrbm93biBhZnRlciBhcHBseSkNCiAgICAgICAgG1sxbRtbMG1hY2wbWzBtG1swbSAgICAgICAgICAgICAgICAgICAgICAgICA9ICJwcml2YXRlIg0KICAgICAgG1szM21+G1swbSAbWzBtG1sxbRtbMG1hcm4bWzBtG1swbSAgICAgICAgICAgICAgICAgICAgICAgICA9ICJhcm46YXdzOnMzOjo6ZGVtby1idWNrZXQyMDIwMDgyNDE3MTIxMzgyMzMwMDAwMDAwMSIgG1szM20tPhtbMG0gG1swbShrbm93biBhZnRlciBhcHBseSkNCiAgICAgIBtbMzNtfhtbMG0gG1swbRtbMW0bWzBtYnVja2V0G1swbRtbMG0gICAgICAgICAgICAgICAgICAgICAgPSAiZGVtby1idWNrZXQyMDIwMDgyNDE3MTIxMzgyMzMwMDAwMDAwMSIgG1szM20tPhtbMG0gG1swbShrbm93biBhZnRlciBhcHBseSkNCiAgICAgIBtbMzNtfhtbMG0gG1swbRtbMW0bWzBtYnVja2V0X2RvbWFpbl9uYW1lG1swbRtbMG0gICAgICAgICAgPSAiZGVtby1idWNrZXQyMDIwMDgyNDE3MTIxMzgyMzMwMDAwMDAwMS5zMy5hbWF6b25hd3MuY29tIiAbWzMzbS0+G1swbSAbWzBtKGtub3duIGFmdGVyIGFwcGx5KQ0KICAgICAgG1szM21+G1swbSAbWzBtG1sxbRtbMG1idWNrZXRfcHJlZml4G1swbRtbMG0gICAgICAgICAgICAgICA9ICJkZW1vLWJ1Y2tldCIgG1szM20tPhtbMG0gG1swbSJkZW1vLWJ1Y2tldDIiIBtbMzFtIyBmb3JjZXMgcmVwbGFjZW1lbnQbWzBtG1swbQ0KICAgICAgG1szM21+G1swbSAbWzBtG1sxbRtbMG1idWNrZXRfcmVnaW9uYWxfZG9tYWluX25hbWUbWzBtG1swbSA9ICJkZW1vLWJ1Y2tldDIwMjAwODI0MTcxMjEzODIzMzAwMDAwMDAxLnMzLmFtYXpvbmF3cy5jb20iIBtbMzNtLT4bWzBtIBtbMG0oa25vd24gYWZ0ZXIgYXBwbHkpDQogICAgICAgIBtbMW0bWzBtZm9yY2VfZGVzdHJveRtbMG0bWzBtICAgICAgICAgICAgICAgPSBmYWxzZQ0KICAgICAgG1szM21+G1swbSAbWzBtG1sxbRtbMG1ob3N0ZWRfem9uZV9pZBtbMG0bWzBtICAgICAgICAgICAgICA9ICJaM0FRQlNUR0ZZSlNURiIgG1szM20tPhtbMG0gG1swbShrbm93biBhZnRlciBhcHBseSkNCiAgICAgIBtbMzNtfhtbMG0gG1swbRtbMW0bWzBtaWQbWzBtG1swbSAgICAgICAgICAgICAgICAgICAgICAgICAgPSAiZGVtby1idWNrZXQyMDIwMDgyNDE3MTIxMzgyMzMwMDAwMDAwMSIgG1szM20tPhtbMG0gG1swbShrbm93biBhZnRlciBhcHBseSkNCiAgICAgIBtbMzNtfhtbMG0gG1swbRtbMW0bWzBtcmVnaW9uG1swbRtbMG0gICAgICAgICAgICAgICAgICAgICAgPSAidXMtZWFzdC0xIiAbWzMzbS0+G1swbSAbWzBtKGtub3duIGFmdGVyIGFwcGx5KQ0KICAgICAgG1szM21+G1swbSAbWzBtG1sxbRtbMG1yZXF1ZXN0X3BheWVyG1swbRtbMG0gICAgICAgICAgICAgICA9ICJCdWNrZXRPd25lciIgG1szM20tPhtbMG0gG1swbShrbm93biBhZnRlciBhcHBseSkNCiAgICAgIBtbMzFtLRtbMG0gG1swbRtbMW0bWzBtdGFncxtbMG0bWzBtICAgICAgICAgICAgICAgICAgICAgICAgPSB7fSAbWzkwbS0+G1swbSAbWzBtG1s5MG1udWxsG1swbRtbMG0NCiAgICAgIBtbMzJtKxtbMG0gG1swbRtbMW0bWzBtd2Vic2l0ZV9kb21haW4bWzBtG1swbSAgICAgICAgICAgICAgPSAoa25vd24gYWZ0ZXIgYXBwbHkpDQogICAgICAbWzMybSsbWzBtIBtbMG0bWzFtG1swbXdlYnNpdGVfZW5kcG9pbnQbWzBtG1swbSAgICAgICAgICAgID0gKGtub3duIGFmdGVyIGFwcGx5KQ0KDQogICAgICAbWzMzbX4bWzBtIBtbMG12ZXJzaW9uaW5nIHsNCiAgICAgICAgICAbWzMzbX4bWzBtIBtbMG0bWzFtG1swbWVuYWJsZWQbWzBtG1swbSAgICA9IGZhbHNlIBtbMzNtLT4bWzBtIBtbMG0oa25vd24gYWZ0ZXIgYXBwbHkpDQogICAgICAgICAgG1szM21+G1swbSAbWzBtG1sxbRtbMG1tZmFfZGVsZXRlG1swbRtbMG0gPSBmYWxzZSAbWzMzbS0+G1swbSAbWzBtKGtub3duIGFmdGVyIGFwcGx5KQ0KICAgICAgICB9DQogICAgfQ0KDQobWzFtICAjIGF3c19zcXNfcXVldWUubXlfcXVldWUbWzBtIHdpbGwgYmUgdXBkYXRlZCBpbi1wbGFjZRtbMG0bWzBtDQobWzBtICAbWzMzbX4bWzBtG1swbSByZXNvdXJjZSAiYXdzX3Nxc19xdWV1ZSIgIm15X3F1ZXVlIiB7DQogICAgICAgIBtbMW0bWzBtYXJuG1swbRtbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAiYXJuOmF3czpzcXM6dXMtZWFzdC0xOjEyMzQ1Njc4OTAxMjpteS1xdWV1ZSINCiAgICAgICAgG1sxbRtbMG1jb250ZW50X2Jhc2VkX2RlZHVwbGljYXRpb24bWzBtG1swbSAgICAgICA9IGZhbHNlDQogICAgICAbWzMzbX4bWzBtIBtbMG0bWzFtG1swbWRlbGF5X3NlY29uZHMbWzBtG1swbSAgICAgICAgICAgICAgICAgICAgID0gMCAbWzMzbS0+G1swbSAbWzBtMw0KICAgICAgICAbWzFtG1swbWZpZm9fcXVldWUbWzBtG1swbSAgICAgICAgICAgICAgICAgICAgICAgID0gZmFsc2UNCiAgICAgICAgG1sxbRtbMG1pZBtbMG0bWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICJodHRwczovL3Nxcy51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS8xMjM0NTY3ODkwMTIvbXktcXVldWUiDQogICAgICAgIBtbMW0bWzBta21zX2RhdGFfa2V5X3JldXNlX3BlcmlvZF9zZWNvbmRzG1swbRtbMG0gPSAzMDANCiAgICAgICAgG1sxbRtbMG1tYXhfbWVzc2FnZV9zaXplG1swbRtbMG0gICAgICAgICAgICAgICAgICA9IDI2MjE0NA0KICAgICAgICAbWzFtG1swbW1lc3NhZ2VfcmV0ZW50aW9uX3NlY29uZHMbWzBtG1swbSAgICAgICAgID0gMzQ1NjAwDQogICAgICAgIBtbMW0bWzBtbmFtZRtbMG0bWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAibXktcXVldWUiDQogICAgICAgIBtbMW0bWzBtcmVjZWl2ZV93YWl0X3RpbWVfc2Vjb25kcxtbMG0bWzBtICAgICAgICAgPSAwDQogICAgICAgIBtbMW0bWzBtdGFncxtbMG0bWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB7fQ0KICAgICAgICAbWzFtG1swbXZpc2liaWxpdHlfdGltZW91dF9zZWNvbmRzG1swbRtbMG0gICAgICAgID0gMzANCiAgICB9DQoNChtbMW0gICMgYXdzX3NzbV9wYXJhbWV0ZXIubXlfcGFyYW1ldGVyG1swbSB3aWxsIGJlIGNyZWF0ZWQbWzBtG1swbQ0KG1swbSAgG1szMm0rG1swbRtbMG0gcmVzb3VyY2UgImF3c19zc21fcGFyYW1ldGVyIiAibXlfcGFyYW1ldGVyIiB7DQogICAgICAbWzMybSsbWzBtIBtbMG0bWzFtG1swbWFybhtbMG0bWzBtICAgICAgID0gKGtub3duIGFmdGVyIGFwcGx5KQ0KICAgICAgG1szMm0rG1swbSAbWzBtG1sxbRtbMG1kYXRhX3R5cGUbWzBtG1swbSA9IChrbm93biBhZnRlciBhcHBseSkNCiAgICAgIBtbMzJtKxtbMG0gG1swbRtbMW0bWzBtaWQbWzBtG1swbSAgICAgICAgPSAoa25vd24gYWZ0ZXIgYXBwbHkpDQogICAgICAbWzMybSsbWzBtIBtbMG0bWzFtG1swbWtleV9pZBtbMG0bWzBtICAgID0gKGtub3duIGFmdGVyIGFwcGx5KQ0KICAgICAgG1szMm0rG1swbSAbWzBtG1sxbRtbMG1uYW1lG1swbRtbMG0gICAgICA9ICJteS1wYXJhbWV0ZXIiDQogICAgICAbWzMybSsbWzBtIBtbMG0bWzFtG1swbXRpZXIbWzBtG1swbSAgICAgID0gIlN0YW5kYXJkIg0KICAgICAgG1szMm0rG1swbSAbWzBtG1sxbRtbMG10eXBlG1swbRtbMG0gICAgICA9ICJTdHJpbmciDQogICAgICAbWzMybSsbWzBtIBtbMG0bWzFtG1swbXZhbHVlG1swbRtbMG0gICAgID0gKHNlbnNpdGl2ZSB2YWx1ZSkNCiAgICAgIBtbMzJtKxtbMG0gG1swbRtbMW0bWzBtdmVyc2lvbhtbMG0bWzBtICAgPSAoa25vd24gYWZ0ZXIgYXBwbHkpDQogICAgfQ0KDQobWzBtG1sxbVBsYW46G1swbSAyIHRvIGFkZCwgMSB0byBjaGFuZ2UsIDEgdG8gZGVzdHJveS4bWzBtDQo=")
